// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


//import frc.robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import frc.robot.Constants;
import frc.robot.logging.RobotLogger;
import frc.robot.RobotContainer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


  /**
   * Creates new shooter
   */
public class Shooter extends SubsystemBase {

    private final WPI_TalonFX m_shootMotor;
    private ShooterState shooterState = ShooterState.OFF;
    private final RobotLogger logger = RobotContainer.getLogger();
    private double targetSpeed;

    public enum ShooterState {
        OFF, IDLE, TARGETING, FIRE
    }
    /**
    * Initializes shooter motor.
    */
    public Shooter() {
        m_shootMotor = new WPI_TalonFX(Constants.SHOOTER_LEAD_MOTOR); //test motor, change for eventual shooter.
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        //run through cases, will either target or fire when ready

        checkState();
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    public void checkState() {
        switch(shooterState) {
            case OFF:
                // Turns off shooter   <-- code goes here
                logger.logInfo("Shooter powered off.");
                SmartDashboard.putString("Shooter state", "OFF");
                break;
            case IDLE:
               SmartDashboard.putString("Shooter state", "IDLE");
               break;
            case TARGETING:
                logger.logInfo("Targeting sequence initiated.");
                SmartDashboard.putString("Shooter state", "TARGETING");

                // Targets goal, code still to be added. Do we spin up motor here or fire?
                shooterState = ShooterState.FIRE;
                logger.logInfo("Targeting complete, ready to begin firing sequence.");
                break;
            case FIRE:
                logger.logInfo("Firing sequence initiated.");
                SmartDashboard.putString("Shooter state", "FIRE");
                
                // Gets target RPM number calculated in TargetLocate.java and sets motor to that speed.
                targetSpeed = SmartDashboard.getNumber("Target flywheel speed", 0.0);
                setSpeed(targetSpeed);
                logger.logInfo("Firing sequence terminated.");
                break;
        }
    }

    public void setFire(boolean ready) {
        if (ready) {
            shooterState = ShooterState.FIRE;
            checkState();
        }
    }

    public void setSpeed(double speed) {
        m_shootMotor.set(speed);
    }

    // Gets shooter state
    public Shooter.ShooterState getShooterState() {
        return shooterState;
    }
}