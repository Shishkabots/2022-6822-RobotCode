// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


//import frc.robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import frc.robot.Constants;
import frc.robot.logging.RobotLogger;
import frc.robot.RobotContainer;
import frc.robot.subsystems.Elevator;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


  /**
   * Creates new shooter
   */
public class Shooter extends SubsystemBase {

    private final WPI_TalonFX m_shootMotor;
    private ShooterState m_shooterState;
    private final RobotLogger m_logger;
    private boolean m_isReady;
    private Elevator m_elevator;

    public enum ShooterState {
        OFF, IDLE, TARGETING, FIRE
    }
    /**
    * Initializes shooter motor.
    */
    public Shooter() {
        // Assuming a Talon FX motor as of now
        m_shootMotor = new WPI_TalonFX(Constants.SHOOTER_LEAD_MOTOR); 
        m_shooterState = ShooterState.IDLE;
        m_isReady = false;
        m_logger = RobotContainer.getLogger();
        m_elevator = new Elevator();
    }

    @Override
    public void periodic() {
        // Called once per scheduler run (i.e., every 20 ms)
        checkState();
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    public void checkState() {
        switch(m_shooterState) {
            case OFF:
                // Turns off shooter   <-- code goes here
                m_logger.logInfo("Shooter powered off.");
                SmartDashboard.putString("Shooter state", "OFF");
                break;
            case IDLE:
               SmartDashboard.putString("Shooter state", "IDLE");
               m_isReady = false;
               break;
            case TARGETING:
                m_logger.logInfo("Targeting sequence initiated.");
                SmartDashboard.putString("Shooter state", "TARGETING");

                /**
                 * TODO:
                 * 1. Use turret motor to locate reflective tape
                 * 2. Position crosshair at center of goal
                 * 3. Signal that robot is ready to fire
                 * 4. If 1-3 successful, set shooter state to fire.
                 */
                m_shooterState = ShooterState.FIRE;
                m_logger.logInfo("Targeting complete, ready to begin firing sequence.");
                break;
            case FIRE:
                m_logger.logInfo("Firing sequence initiated.");
                SmartDashboard.putString("Shooter state", "FIRE");

                /**
                 * 1. Get the target speed calculated earlier 
                 *    (written to SmartDashboard in TargetLocate)
                 * 2. Sets the flyWheel's motor's speed
                 */
                double targetFlywheelSpeed = SmartDashboard.getNumber("Target flywheel speed", 0.0);
                setMotorSpeed(targetFlywheelSpeed);
                
                /**
                 * 1. Wait till shooter motor hits the target speed
                 */
                if (waitForTargetFlywheelSpeedReach(targetFlywheelSpeed)) {
                    m_isReady = true;
                    m_elevator.runElevator(m_isReady);
                }
                m_logger.logInfo("Firing sequence terminated.");
                break;
        }
    }

    public void setFire(boolean ready) {
        if (ready) {
            m_shooterState = ShooterState.FIRE;
            checkState();
        }
    }
    /**
     * @param speed
     * Sets speed of motor
     */
    public void setMotorSpeed(double speed) {
        m_shootMotor.set(speed);
    }

    /**
     * Returns speed of motor
     * TODO: Convert motorSpeed to scaled value between -1.0 and 1.0.
     */
    public double getMotorSpeed() {
        return m_shootMotor.get();
    }

    /**
     * @return true if the shooter is ready to receive the ball from elevator
     *         false otherwise    
     */ 
    public boolean isReady() {
        return m_isReady;
    }

    /*
     * Accessor: Gets shooter state
     */ 
    public Shooter.ShooterState getShooterState() {
        return m_shooterState;
    }

    /**
     * TODO: Implement logic for checking target speed is reached
     *       A poor man's exact value check right now
     * @param targetSpeed
     * @return
     */
    private boolean waitForTargetFlywheelSpeedReach(double targetSpeed) {
        return getMotorSpeed() == targetSpeed;
    }
}